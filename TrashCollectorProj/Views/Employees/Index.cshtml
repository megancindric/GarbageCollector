@model EmployeeIndexViewModel

@{
    ViewData["Title"] = "CustomerDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";


}

<style>
    #map {
        width: 100%;
        height: 400px;
    }
</style>
<script async defer src="@APIKey.APIURL">
</script>

<h1>Employee Dashboard</h1>

<div class="col-md-4">
    <form asp-action="Index">
        <div class="form-group">
            <label asp-for="SelectedDay" class="control-label"></label>
            <select asp-for="SelectedDay" asp-items="@Model.DayOfWeekList" class="form-control"></select>
            <span asp-validation-for="SelectedDay" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input type="submit" value="Filter By Day" class="btn btn-info" />
        </div>
    </form>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].PickupDay)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].ZipCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].LastPickupDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].ExtraPickupDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].TrashFees)
            </th>
            <th>
                Customer Options:
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Customers)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.PickupDay)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ZipCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastPickupDate)
            </td>
            @if (item.ExtraPickupDate != default)
            {
                <td>
                    @Html.DisplayFor(modelItem => item.ExtraPickupDate)
                </td>
            }
            else
            {
                <td>
                    No Extra Pickups Scheduled.
                </td>
            }
            <th>
                @Html.DisplayNameFor(model => model.Customers[0].ExtraPickupDate)
            </th>
            <td>
                <a asp-action="ConfirmPickup" asp-route-id="@item.Id">Confirm this Pickup</a> |
                <a asp-action="CustomerDetails" asp-route-id="@item.Id">View Customer Details & Location</a> |
                <a asp-action="DeleteCustomer" asp-route-id="@item.Id">Remove Customer [TESTING]</a>
            </td>
        </tr>

        }
    </tbody>
</table>

@if (Model.Customers.Count > 0)
{
<script>
    // Initialize and add the map
    function initMap() {
        // The map, centered at custZip
        var custLocation = { lat: @Model.Customers[0].Latitude, lng: @Model.Customers[0].Longitude}
        var map = new google.maps.Map(
            document.getElementById('map'), { zoom: 14, center: custLocation });

        @foreach(var customer in Model.Customers)
        {
            string custDetails = "var custLocation = { lat: " + customer.Latitude + ", lng: " + customer.Longitude + " };";
            @Html.Raw(custDetails);
            string custMarker = "var marker" + customer.Id + " = new google.maps.Marker({ position: custLocation, map: map });";
            @Html.Raw(custMarker);
        }

    }
</script>
    <div id="map"></div>
}